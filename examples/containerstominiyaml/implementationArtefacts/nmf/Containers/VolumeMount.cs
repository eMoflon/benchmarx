//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.14
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Hsrm.TTC23.Containers
{
    
    
    /// <summary>
    /// The default implementation of the VolumeMount class
    /// </summary>
    [XmlNamespaceAttribute("http://york.ac.uk/ttc/containers/1.0.0")]
    [XmlNamespacePrefixAttribute("c")]
    [ModelRepresentationClassAttribute("http://york.ac.uk/ttc/containers/1.0.0#//VolumeMount")]
    public partial class VolumeMount : ModelElement, IVolumeMount, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Path property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _path;
        
        private static Lazy<ITypedElement> _pathAttribute = new Lazy<ITypedElement>(RetrievePathAttribute);
        
        private static Lazy<ITypedElement> _volumeReference = new Lazy<ITypedElement>(RetrieveVolumeReference);
        
        /// <summary>
        /// The backing field for the Volume property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IVolume _volume;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The path property
        /// </summary>
        [DisplayNameAttribute("path")]
        [CategoryAttribute("VolumeMount")]
        [XmlElementNameAttribute("path")]
        [XmlAttributeAttribute(true)]
        public string Path
        {
            get
            {
                return this._path;
            }
            set
            {
                if ((this._path != value))
                {
                    string old = this._path;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPathChanging(e);
                    this.OnPropertyChanging("Path", e, _pathAttribute);
                    this._path = value;
                    this.OnPathChanged(e);
                    this.OnPropertyChanged("Path", e, _pathAttribute);
                }
            }
        }
        
        /// <summary>
        /// The volume property
        /// </summary>
        [DisplayNameAttribute("volume")]
        [CategoryAttribute("VolumeMount")]
        [XmlElementNameAttribute("volume")]
        [XmlAttributeAttribute(true)]
        public IVolume Volume
        {
            get
            {
                return this._volume;
            }
            set
            {
                if ((this._volume != value))
                {
                    IVolume old = this._volume;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolumeChanging(e);
                    this.OnPropertyChanging("Volume", e, _volumeReference);
                    this._volume = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVolume;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVolume;
                    }
                    this.OnVolumeChanged(e);
                    this.OnPropertyChanged("Volume", e, _volumeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new VolumeMountReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://york.ac.uk/ttc/containers/1.0.0#//VolumeMount")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Path property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PathChanging;
        
        /// <summary>
        /// Gets fired when the Path property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PathChanged;
        
        /// <summary>
        /// Gets fired before the Volume property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VolumeChanging;
        
        /// <summary>
        /// Gets fired when the Volume property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VolumeChanged;
        
        private static ITypedElement RetrievePathAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Hsrm.TTC23.Containers.VolumeMount.ClassInstance)).Resolve("path")));
        }
        
        /// <summary>
        /// Raises the PathChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPathChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PathChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PathChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPathChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PathChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVolumeReference()
        {
            return ((ITypedElement)(((ModelElement)(Hsrm.TTC23.Containers.VolumeMount.ClassInstance)).Resolve("volume")));
        }
        
        /// <summary>
        /// Raises the VolumeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolumeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VolumeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VolumeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolumeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VolumeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Volume property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVolume(object sender, System.EventArgs eventArgs)
        {
            this.Volume = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "VOLUME"))
            {
                return this.Volume;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PATH"))
            {
                return this.Path;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VOLUME"))
            {
                this.Volume = ((IVolume)(value));
                return;
            }
            if ((feature == "PATH"))
            {
                this.Path = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PATH"))
            {
                return new PathProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "VOLUME"))
            {
                return new VolumeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://york.ac.uk/ttc/containers/1.0.0#//VolumeMount")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the VolumeMount class
        /// </summary>
        public class VolumeMountReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private VolumeMount _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public VolumeMountReferencedElementsCollection(VolumeMount parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Volume != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.VolumeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.VolumeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Volume == null))
                {
                    IVolume volumeCasted = item.As<IVolume>();
                    if ((volumeCasted != null))
                    {
                        this._parent.Volume = volumeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Volume = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Volume))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Volume != null))
                {
                    array[arrayIndex] = this._parent.Volume;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Volume == item))
                {
                    this._parent.Volume = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Volume).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the path property
        /// </summary>
        private sealed class PathProxy : ModelPropertyChange<IVolumeMount, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PathProxy(IVolumeMount modelElement) : 
                    base(modelElement, "path")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Path;
                }
                set
                {
                    this.ModelElement.Path = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the volume property
        /// </summary>
        private sealed class VolumeProxy : ModelPropertyChange<IVolumeMount, IVolume>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VolumeProxy(IVolumeMount modelElement) : 
                    base(modelElement, "volume")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVolume Value
            {
                get
                {
                    return this.ModelElement.Volume;
                }
                set
                {
                    this.ModelElement.Volume = value;
                }
            }
        }
    }
}

