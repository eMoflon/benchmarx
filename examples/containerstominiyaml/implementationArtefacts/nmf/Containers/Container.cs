//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.14
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Hsrm.TTC23.Containers
{
    
    
    /// <summary>
    /// The default implementation of the Container class
    /// </summary>
    [XmlNamespaceAttribute("http://york.ac.uk/ttc/containers/1.0.0")]
    [XmlNamespacePrefixAttribute("c")]
    [ModelRepresentationClassAttribute("http://york.ac.uk/ttc/containers/1.0.0#//Container")]
    [DebuggerDisplayAttribute("Container {Name}")]
    public partial class Container : Node, Hsrm.TTC23.Containers.IContainer, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Replicas property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _replicas = 1;
        
        private static Lazy<ITypedElement> _replicasAttribute = new Lazy<ITypedElement>(RetrieveReplicasAttribute);
        
        private static Lazy<ITypedElement> _imageReference = new Lazy<ITypedElement>(RetrieveImageReference);
        
        /// <summary>
        /// The backing field for the Image property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IImage _image;
        
        private static Lazy<ITypedElement> _dependsOnReference = new Lazy<ITypedElement>(RetrieveDependsOnReference);
        
        /// <summary>
        /// The backing field for the DependsOn property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationOrderedSet<Hsrm.TTC23.Containers.IContainer> _dependsOn;
        
        private static Lazy<ITypedElement> _volumeMountsReference = new Lazy<ITypedElement>(RetrieveVolumeMountsReference);
        
        /// <summary>
        /// The backing field for the VolumeMounts property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IVolumeMount> _volumeMounts;
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        private static IClass _classInstance;
        
        public Container()
        {
            this._dependsOn = new ObservableAssociationOrderedSet<Hsrm.TTC23.Containers.IContainer>();
            this._dependsOn.CollectionChanging += this.DependsOnCollectionChanging;
            this._dependsOn.CollectionChanged += this.DependsOnCollectionChanged;
            this._volumeMounts = new ObservableCompositionOrderedSet<IVolumeMount>(this);
            this._volumeMounts.CollectionChanging += this.VolumeMountsCollectionChanging;
            this._volumeMounts.CollectionChanged += this.VolumeMountsCollectionChanged;
        }
        
        /// <summary>
        /// The replicas property
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("replicas")]
        [CategoryAttribute("Container")]
        [XmlElementNameAttribute("replicas")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Replicas
        {
            get
            {
                return this._replicas;
            }
            set
            {
                if ((this._replicas != value))
                {
                    Nullable<int> old = this._replicas;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReplicasChanging(e);
                    this.OnPropertyChanging("Replicas", e, _replicasAttribute);
                    this._replicas = value;
                    this.OnReplicasChanged(e);
                    this.OnPropertyChanged("Replicas", e, _replicasAttribute);
                }
            }
        }
        
        /// <summary>
        /// The image property
        /// </summary>
        [DisplayNameAttribute("image")]
        [CategoryAttribute("Container")]
        [XmlElementNameAttribute("image")]
        [XmlAttributeAttribute(true)]
        public IImage Image
        {
            get
            {
                return this._image;
            }
            set
            {
                if ((this._image != value))
                {
                    IImage old = this._image;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImageChanging(e);
                    this.OnPropertyChanging("Image", e, _imageReference);
                    this._image = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImage;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImage;
                    }
                    this.OnImageChanged(e);
                    this.OnPropertyChanged("Image", e, _imageReference);
                }
            }
        }
        
        /// <summary>
        /// The dependsOn property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("dependsOn")]
        [CategoryAttribute("Container")]
        [XmlElementNameAttribute("dependsOn")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<Hsrm.TTC23.Containers.IContainer> DependsOn
        {
            get
            {
                return this._dependsOn;
            }
        }
        
        /// <summary>
        /// The volumeMounts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("volumeMounts")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IVolumeMount> VolumeMounts
        {
            get
            {
                return this._volumeMounts;
            }
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("NamedElement")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ContainerChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ContainerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://york.ac.uk/ttc/containers/1.0.0#//Container")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Replicas property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReplicasChanging;
        
        /// <summary>
        /// Gets fired when the Replicas property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReplicasChanged;
        
        /// <summary>
        /// Gets fired before the Image property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImageChanging;
        
        /// <summary>
        /// Gets fired when the Image property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImageChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        private static ITypedElement RetrieveReplicasAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Hsrm.TTC23.Containers.Container.ClassInstance)).Resolve("replicas")));
        }
        
        /// <summary>
        /// Raises the ReplicasChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReplicasChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReplicasChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReplicasChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReplicasChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReplicasChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveImageReference()
        {
            return ((ITypedElement)(((ModelElement)(Hsrm.TTC23.Containers.Container.ClassInstance)).Resolve("image")));
        }
        
        /// <summary>
        /// Raises the ImageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Image property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImage(object sender, System.EventArgs eventArgs)
        {
            this.Image = null;
        }
        
        private static ITypedElement RetrieveDependsOnReference()
        {
            return ((ITypedElement)(((ModelElement)(Hsrm.TTC23.Containers.Container.ClassInstance)).Resolve("dependsOn")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DependsOn property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DependsOnCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DependsOn", e, _dependsOnReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DependsOn property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DependsOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DependsOn", e, _dependsOnReference);
        }
        
        private static ITypedElement RetrieveVolumeMountsReference()
        {
            return ((ITypedElement)(((ModelElement)(Hsrm.TTC23.Containers.Container.ClassInstance)).Resolve("volumeMounts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the VolumeMounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VolumeMountsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("VolumeMounts", e, _volumeMountsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the VolumeMounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VolumeMountsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("VolumeMounts", e, _volumeMountsReference);
        }
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Hsrm.TTC23.Containers.NamedElement.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int volumeMountsIndex = ModelHelper.IndexOfReference(this.VolumeMounts, element);
            if ((volumeMountsIndex != -1))
            {
                return ModelHelper.CreatePath("volumeMounts", volumeMountsIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "IMAGE"))
            {
                return this.Image;
            }
            if ((reference == "DEPENDSON"))
            {
                if ((index < this.DependsOn.Count))
                {
                    return this.DependsOn[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "VOLUMEMOUNTS"))
            {
                if ((index < this.VolumeMounts.Count))
                {
                    return this.VolumeMounts[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "REPLICAS"))
            {
                return this.Replicas;
            }
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "DEPENDSON"))
            {
                return this._dependsOn;
            }
            if ((feature == "VOLUMEMOUNTS"))
            {
                return this._volumeMounts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "IMAGE"))
            {
                this.Image = ((IImage)(value));
                return;
            }
            if ((feature == "REPLICAS"))
            {
                this.Replicas = ((int)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "REPLICAS"))
            {
                return Observable.Box(new ReplicasProxy(this));
            }
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "IMAGE"))
            {
                return new ImageProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._volumeMounts))
            {
                return "volumeMounts";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://york.ac.uk/ttc/containers/1.0.0#//Container")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        protected override Uri CreateUriWithFragment(string fragment, bool absolute, IModelElement baseElement)
        {
            return this.CreateUriFromGlobalIdentifier(fragment, absolute);
        }
        
        protected override void PropagateNewModel(Model newModel, Model oldModel, IModelElement subtreeRoot)
        {
            string id = this.ToIdentifierString();
            if ((oldModel != null))
            {
                oldModel.UnregisterId(id);
            }
            if ((newModel != null))
            {
                newModel.RegisterId(id, this);
            }
            base.PropagateNewModel(newModel, oldModel, subtreeRoot);
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Container class
        /// </summary>
        public class ContainerChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Container _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ContainerChildrenCollection(Container parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.VolumeMounts.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.VolumeMounts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.VolumeMounts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IVolumeMount volumeMountsCasted = item.As<IVolumeMount>();
                if ((volumeMountsCasted != null))
                {
                    this._parent.VolumeMounts.Add(volumeMountsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.VolumeMounts.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.VolumeMounts.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> volumeMountsEnumerator = this._parent.VolumeMounts.GetEnumerator();
                try
                {
                    for (
                    ; volumeMountsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = volumeMountsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    volumeMountsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IVolumeMount volumeMountItem = item.As<IVolumeMount>();
                if (((volumeMountItem != null) 
                            && this._parent.VolumeMounts.Remove(volumeMountItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.VolumeMounts).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Container class
        /// </summary>
        public class ContainerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Container _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ContainerReferencedElementsCollection(Container parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Image != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.DependsOn.Count);
                    count = (count + this._parent.VolumeMounts.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ImageChanged += this.PropagateValueChanges;
                this._parent.DependsOn.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.VolumeMounts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ImageChanged -= this.PropagateValueChanges;
                this._parent.DependsOn.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.VolumeMounts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Image == null))
                {
                    IImage imageCasted = item.As<IImage>();
                    if ((imageCasted != null))
                    {
                        this._parent.Image = imageCasted;
                        return;
                    }
                }
                Hsrm.TTC23.Containers.IContainer dependsOnCasted = item.As<Hsrm.TTC23.Containers.IContainer>();
                if ((dependsOnCasted != null))
                {
                    this._parent.DependsOn.Add(dependsOnCasted);
                }
                IVolumeMount volumeMountsCasted = item.As<IVolumeMount>();
                if ((volumeMountsCasted != null))
                {
                    this._parent.VolumeMounts.Add(volumeMountsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Image = null;
                this._parent.DependsOn.Clear();
                this._parent.VolumeMounts.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Image))
                {
                    return true;
                }
                if (this._parent.DependsOn.Contains(item))
                {
                    return true;
                }
                if (this._parent.VolumeMounts.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Image != null))
                {
                    array[arrayIndex] = this._parent.Image;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> dependsOnEnumerator = this._parent.DependsOn.GetEnumerator();
                try
                {
                    for (
                    ; dependsOnEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dependsOnEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dependsOnEnumerator.Dispose();
                }
                IEnumerator<IModelElement> volumeMountsEnumerator = this._parent.VolumeMounts.GetEnumerator();
                try
                {
                    for (
                    ; volumeMountsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = volumeMountsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    volumeMountsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Image == item))
                {
                    this._parent.Image = null;
                    return true;
                }
                Hsrm.TTC23.Containers.IContainer containerItem = item.As<Hsrm.TTC23.Containers.IContainer>();
                if (((containerItem != null) 
                            && this._parent.DependsOn.Remove(containerItem)))
                {
                    return true;
                }
                IVolumeMount volumeMountItem = item.As<IVolumeMount>();
                if (((volumeMountItem != null) 
                            && this._parent.VolumeMounts.Remove(volumeMountItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Image).Concat(this._parent.DependsOn).Concat(this._parent.VolumeMounts).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the replicas property
        /// </summary>
        private sealed class ReplicasProxy : ModelPropertyChange<Hsrm.TTC23.Containers.IContainer, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReplicasProxy(Hsrm.TTC23.Containers.IContainer modelElement) : 
                    base(modelElement, "replicas")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Replicas;
                }
                set
                {
                    this.ModelElement.Replicas = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the image property
        /// </summary>
        private sealed class ImageProxy : ModelPropertyChange<Hsrm.TTC23.Containers.IContainer, IImage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImageProxy(Hsrm.TTC23.Containers.IContainer modelElement) : 
                    base(modelElement, "image")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IImage Value
            {
                get
                {
                    return this.ModelElement.Image;
                }
                set
                {
                    this.ModelElement.Image = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<INamedElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(INamedElement modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
    }
}

