@article{leite_survey_2020,
	title = {A {Survey} of {DevOps} {Concepts} and {Challenges}},
	volume = {52},
	issn = {0360-0300, 1557-7341},
	doi = {10.1145/3359981},
	abstract = {DevOpsis a collaborative and multidisciplinary organizational effort to automate continuous delivery of new software updates while guaranteeing their correctness and reliability. The present survey investigates and discusses DevOps challenges from the perspective of engineers, managers, and researchers. We review the literature and develop a DevOps conceptual map, correlating the DevOps automation tools with these concepts. We then discuss their practical implications for engineers, managers, and researchers. Finally, we critically explore some of the most relevant DevOps challenges reported by the literature.},
	language = {en},
	number = {6},
	journal = {ACM Computing Surveys},
	author = {Leite, Leonardo and Rocha, Carla and Kon, Fabio and Milojicic, Dejan and Meirelles, Paulo},
	month = nov,
	year = {2020},
}

@article{sorgalla_applying_2021,
	title = {Applying {Model}-{Driven} {Engineering} to {Stimulate} the {Adoption} of {DevOps} {Processes} in {Small} and {Medium}-{Sized} {Development} {Organizations}},
	volume = {2},
	issn = {2661-8907},
	doi = {10.1007/s42979-021-00825-z},
	abstract = {Microservice architecture (MSA) denotes an increasingly popular architectural style in which business capabilities are wrapped into autonomously developable and deployable software components called microservices. Microservice applications are developed by multiple DevOps teams each owning one or more services. In this article, we explore the state of how DevOps teams in small and medium-sized organizations (SMOs) cope with MSA and how they can be supported. We show through a secondary analysis of an exploratory interview study comprising six cases, that the organizational and technological complexity resulting from MSA poses particular challenges for small and medium-sized organizations (SMOs). We apply model-driven engineering to address these challenges. As results of the second analysis, we identify the challenge areas of building and maintaining a common architectural understanding, and dealing with deployment technologies. To support DevOps teams of SMOs in coping with these challenges, we present a model-driven workflow based on LEMMA—the Language Ecosystem for Modeling Microservice Architecture. To implement the workflow, we extend LEMMA with the functionality to (i) generate models from API documentation; (ii) reference remote models owned by other teams; (iii) generate deployment specifications; and (iv) generate a visual representation of the overall architecture. We validate the model-driven workflow and our extensions to LEMMA through a case study showing that the added functionality to LEMMA can bring efficiency gains for DevOps teams. To develop best practices for applying our workflow to maximize efficiency in SMOs, we plan to conduct more empirical research in the field in the future.},
	language = {en},
	number = {6},
	journal = {SN Computer Science},
	author = {Sorgalla, Jonas and Wizenty, Philip and Rademacher, Florian and Sachweh, Sabine and Zündorf, Albert},
	month = sep,
	year = {2021},
	keywords = {Development process, DevOps, Microservice architecture, Model-driven engineering},
}

@inproceedings{colantoni_devopsml_2020,
	address = {Virtual Event Canada},
	title = {{DevOpsML}: towards modeling {DevOps} processes and platforms},
	isbn = {978-1-4503-8135-2},
	doi = {10.1145/3417990.3420203},
	language = {en},
	urldate = {2023-04-14},
	booktitle = {Proceedings of the 23rd {ACM}/{IEEE} {International} {Conference} on {Model} {Driven} {Engineering} {Languages} and {Systems}: {Companion} {Proceedings}},
	publisher = {ACM},
	author = {Colantoni, Alessandro and Berardinelli, Luca and Wimmer, Manuel},
	month = oct,
	year = {2020},
}

@article{ferry_cloudmf_2018,
	title = {{CloudMF}: {Model}-{Driven} {Management} of {Multi}-{Cloud} {Applications}},
	volume = {18},
	issn = {1533-5399, 1557-6051},
	shorttitle = {{CloudMF}},
	doi = {10.1145/3125621},
	abstract = {While the number of cloud solutions is continuously increasing, the development and operation of large-scale and distributed cloud applications are still challenging. A major challenge is the lack of interoperability between the existing cloud solutions, which increases the complexity of maintaining and evolving complex applications potentially deployed across multiple cloud infrastructures and platforms. In this article, we show how the Cloud Modelling Framework leverages model-driven engineering and supports the DevOps ideas to tame this complexity by providing:
              (i)
              a domain-specific language for specifying the provisioning and deployment of multi-cloud applications, and
              (ii)
              a models@run-time environment for their continuous provisioning, deployment, and adaptation.},
	language = {en},
	number = {2},
	journal = {ACM Transactions on Internet Technology},
	author = {Ferry, Nicolas and Chauvel, Franck and Song, Hui and Rossini, Alessandro and Lushpenko, Maksym and Solberg, Arnor},
	month = may,
	year = {2018},
}


@inproceedings{anjorin_families_2017,
	address = {Marburg, Germany},
	title = {The {Families} to {Persons} {Case}},
	volume = {2026},
	url = {http://ceur-ws.org/Vol-2026/paper2.pdf},
	abstract = {The Families to Persons case is a well-known example problem for bidirectional transformations. This paper proposes an implementation of this case within the recently developed Benchmarx framework [2], based on previous conceptual work [1].},
	language = {en},
	booktitle = {Proceedings of the 10th {Transformation} {Tool} {Contest}},
	publisher = {CEUR-WS.org},
	author = {Anjorin, Anthony and Buchmann, Thomas and Westfechtel, Bernhard},
	month = jul,
	year = {2017},
	pages = {27--34},
	file = {Anjorin et al. - The Families to Persons Case.pdf:/home/agd516/Zotero/storage/F29LELN9/Anjorin et al. - The Families to Persons Case.pdf:application/pdf},
}

@article{anjorin_benchmarking_2020,
	title = {Benchmarking bidirectional transformations: theory, implementation, application, and assessment},
	volume = {19},
	issn = {1619-1374},
	shorttitle = {Benchmarking bidirectional transformations},
	doi = {10.1007/s10270-019-00752-x},
	abstract = {Bidirectional transformations (bx) are relevant for a wide range of application domains. While bx problems may be solved with unidirectional languages and tools, maintaining separate implementations of forward and backward synchronizers with mutually consistent behavior can be difficult, laborious, and error-prone. To address the challenges involved in handling bx problems, dedicated languages and tools for bx have been developed. Due to their heterogeneity, however, the numerous and diverse approaches to bx are difficult to compare, with the consequence that fundamental differences and similarities are not yet well understood. This motivates the need for suitable benchmarks that facilitate the comparison of bx approaches. This paper provides a comprehensive treatment of benchmarking bx, covering theory, implementation, application, and assessment. At the level of theory, we introduce a conceptual framework that defines and classifies architectures of bx tools. At the level of implementation, we describe Benchmarx, an infrastructure for benchmarking bx tools which is based on the conceptual framework. At the level of application, we report on a wide variety of solutions to the well-known Families-to-Persons benchmark, which were developed and compared with the help of Benchmarx. At the level of assessment, we reflect on the usefulness of the Benchmarx approach to benchmarking bx, based on the experiences gained from the Families-to-Persons benchmark.},
	language = {en},
	number = {3},
	journal = {Software and Systems Modeling},
	author = {Anjorin, Anthony and Buchmann, Thomas and Westfechtel, Bernhard and Diskin, Zinovy and Ko, Hsiang-Shang and Eramo, Romina and Hinkel, Georg and Samimi-Dehkordi, Leila and Zündorf, Albert},
	month = may,
	year = {2020},
	keywords = {Benchmark, Bidirectional transformation, Framework, Model synchronization},
	pages = {647--691},
}

@article{piedade_visual_2022,
	title = {Visual notations in container orchestrations: an empirical study with {Docker} {Compose}},
	volume = {21},
	issn = {1619-1374},
	shorttitle = {Visual notations in container orchestrations},
	doi = {10.1007/s10270-022-01027-8},
	abstract = {Container orchestration tools supporting infrastructure-as-code allow new forms of collaboration between developers and operatives. Still, their text-based nature permits naive mistakes and is more difficult to read as complexity increases. We can find few examples of low-code approaches for defining the orchestration of containers, and there seems to be a lack of empirical studies showing the benefits and limitations of such approaches. We hypothesize that a complete visual notation for Docker-based orchestrations could reduce the effort, the error rate, and the development time. Therefore, we developed a tool featuring such a visual notation for Docker Compose configurations, and we empirically evaluated it in a controlled experiment with novice developers. The results show a significant reduction in development time and error-proneness when defining Docker Compose files, supporting our hypothesis. The participants also thought the prototype easier to use and useful, and wanted to use it in the future.},
	language = {en},
	number = {5},
	urldate = {2023-05-17},
	journal = {Software and Systems Modeling},
	author = {Piedade, Bruno and Dias, João Pedro and Correia, Filipe F.},
	month = oct,
	year = {2022},
	pages = {1983--2005},
}

@article{zalila_model-driven_2019,
	title = {Model-driven cloud resource management with {OCCIware}},
	volume = {99},
	issn = {0167-739X},
	doi = {10.1016/j.future.2019.04.015},
	abstract = {Cloud computing has emerged as the main paradigm for hosting and delivering computing resources as services over Internet. It provides a delivery model for computing resources at infrastructure, platform, and software levels. However, there is a plethora of cloud providers offering different resource management interfaces. Due to this diversity, the consumption, provisioning, management, and supervision of cloud resources are subjected to four key issues, i.e., heterogeneity, interoperability, integration, and portability. To cope with these issues, Open Cloud Computing Interface (OCCI) is proposed as a community-based and open recommendation standard for managing any kind of cloud resources. Currently, only runtime implementations exist for OCCI, and each one targets a specific cloud service model such as Infrastructure as a Service (IaaS), Platform as a Service (PaaS), or Software as a Service (SaaS). Thus, OCCI lacks an approach to model and execute different OCCI artifacts. Our approach provides a generic modeling framework coupled with a generic runtime implementation. In this article, we propose the OCCIware approach, which represents the first approach to design, validate, generate, implement, deploy, execute, and supervise everything as a service with OCCI. This approach provides OCCIware Studio, the first model-driven tool chain for OCCI. It is built around OCCIware Metamodel, which defines the static semantics for the OCCI standard in Ecore and OCL. In addition, it proposes OCCIware Runtime, the first generic OCCI runtime implementation targeting all the cloud service models (IaaS, PaaS, and SaaS). OCCIware provides a unique and unified framework to manage OCCI artifacts and, at the same time, it represents a factory to build cloud domain-specific modeling frameworks where each framework targets a specific cloud domain. OCCIware has been applied in various cloud domains and use-cases, which validate its applicability.},
	language = {en},
	journal = {Future Generation Computer Systems},
	author = {Zalila, Faiez and Challita, Stéphanie and Merle, Philippe},
	month = oct,
	year = {2019},
	keywords = {Cloud computing, Computer-aided software engineering, Distributed information systems, Meta modeling, Model-driven engineering (MDE), Modeling environments, Models@runtime, Service computing, Software standards},
	pages = {260--277},
}

@article{challita_model-based_2021,
	title = {Model-based cloud resource management with {TOSCA} and {OCCI}},
	volume = {20},
	issn = {1619-1374},
	doi = {10.1007/s10270-021-00869-y},
	abstract = {With the advent of cloud computing, different cloud providers with heterogeneous cloud services (compute, storage, network, applications, etc.) and their related Application Programming Interfaces (APIs) have emerged. This heterogeneity complicates the implementation of an interoperable cloud system. Several standards have been proposed to address this challenge and provide a unified interface to cloud resources. The Open Cloud Computing Interface (OCCI) thereby focuses on the standardization of a common API for Infrastructure-as-a-Service (IaaS) providers, while the Topology and Orchestration Specification for Cloud Applications (TOSCA) focuses on the standardization of a template language to enable the proper definition of the topology of cloud applications and their orchestrations on top of a cloud system. TOSCA thereby does not define how the application topologies are created on the cloud. Therefore, we analyze the conceptual similarities between the two approaches and we study how we can integrate them to obtain a complete standard-based approach to manage both Cloud Infrastructure and Cloud application layers. We propose an automated extensive mapping between the concepts of the two standards, and we provide TOSCA Studio, a model-driven tool chain for TOSCA that conforms to OCCI. TOSCA Studio allows to graphically design cloud applications as well as to deploy and manage them at runtime using a fully model-driven cloud orchestrator based on the two standards. Our contribution is validated by successfully transforming and deploying three cloud applications: WordPress, Node Cellar and Multi-Tier.},
	language = {en},
	number = {5},
	journal = {Software and Systems Modeling},
	author = {Challita, Stéphanie and Korte, Fabian and Erbel, Johannes and Zalila, Faiez and Grabowski, Jens and Merle, Philippe},
	month = oct,
	year = {2021},
	keywords = {Cloud computing, Cloud orchestrator, Metamodels, Model-driven engineering, Models@run.time, OCCI, Standards, TOSCA},
	pages = {1609--1631},
}
