import "platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Families.msl"
import "platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl"
import "platform:/plugin/org.emoflon.neo.neocore/model/AttributeConstraintsLibrary.msl"

grammar F2P_MI {
	rules {
		
			RegisterToRegisterRule
			RegisterToRegisterRule_1
			RegisterToRegisterRule_3
			RegisterToRegisterRule_5
		
			IgnoreFamilyRule
			IgnoreFamilyRule_1
		
			SonToMaleRule
			SonToMaleRule_1
			SonToMaleRule_2
			SonToMaleRule_3
			SonToMaleRule_7
			SonToMaleRule_8
			SonToMaleRule_9
			SonToMaleRule_25
		
			SonWithFamilyToMaleRule
			SonWithFamilyToMaleRule_1
			SonWithFamilyToMaleRule_2
			SonWithFamilyToMaleRule_3
			SonWithFamilyToMaleRule_7
			SonWithFamilyToMaleRule_8
			SonWithFamilyToMaleRule_9
			SonWithFamilyToMaleRule_32
			SonWithFamilyToMaleRule_33
			SonWithFamilyToMaleRule_40
			SonWithFamilyToMaleRule_41
			SonWithFamilyToMaleRule_56
			SonWithFamilyToMaleRule_57
			SonWithFamilyToMaleRule_97
			SonWithFamilyToMaleRule_105
			SonWithFamilyToMaleRule_121
		
			DaughterToFemaleRule
			DaughterToFemaleRule_1
			DaughterToFemaleRule_2
			DaughterToFemaleRule_3
			DaughterToFemaleRule_7
			DaughterToFemaleRule_8
			DaughterToFemaleRule_9
			DaughterToFemaleRule_25
		
			DaughterWithFamilyToFemaleRule
			DaughterWithFamilyToFemaleRule_1
			DaughterWithFamilyToFemaleRule_2
			DaughterWithFamilyToFemaleRule_3
			DaughterWithFamilyToFemaleRule_7
			DaughterWithFamilyToFemaleRule_8
			DaughterWithFamilyToFemaleRule_9
			DaughterWithFamilyToFemaleRule_32
			DaughterWithFamilyToFemaleRule_33
			DaughterWithFamilyToFemaleRule_40
			DaughterWithFamilyToFemaleRule_41
			DaughterWithFamilyToFemaleRule_56
			DaughterWithFamilyToFemaleRule_57
			DaughterWithFamilyToFemaleRule_97
			DaughterWithFamilyToFemaleRule_105
			DaughterWithFamilyToFemaleRule_121
		
			FatherToMaleRule
			FatherToMaleRule_1
			FatherToMaleRule_2
			FatherToMaleRule_3
			FatherToMaleRule_7
			FatherToMaleRule_8
			FatherToMaleRule_9
			FatherToMaleRule_25
		
			FatherWithFamilyToMaleRule
			FatherWithFamilyToMaleRule_1
			FatherWithFamilyToMaleRule_2
			FatherWithFamilyToMaleRule_3
			FatherWithFamilyToMaleRule_7
			FatherWithFamilyToMaleRule_8
			FatherWithFamilyToMaleRule_9
			FatherWithFamilyToMaleRule_32
			FatherWithFamilyToMaleRule_33
			FatherWithFamilyToMaleRule_40
			FatherWithFamilyToMaleRule_41
			FatherWithFamilyToMaleRule_56
			FatherWithFamilyToMaleRule_57
			FatherWithFamilyToMaleRule_97
			FatherWithFamilyToMaleRule_105
			FatherWithFamilyToMaleRule_121
		
			MotherToFemaleRule
			MotherToFemaleRule_1
			MotherToFemaleRule_2
			MotherToFemaleRule_3
			MotherToFemaleRule_7
			MotherToFemaleRule_8
			MotherToFemaleRule_9
			MotherToFemaleRule_25
		
			MotherWithFamilyToFemaleRule
			MotherWithFamilyToFemaleRule_1
			MotherWithFamilyToFemaleRule_2
			MotherWithFamilyToFemaleRule_3
			MotherWithFamilyToFemaleRule_7
			MotherWithFamilyToFemaleRule_8
			MotherWithFamilyToFemaleRule_9
			MotherWithFamilyToFemaleRule_32
			MotherWithFamilyToFemaleRule_33
			MotherWithFamilyToFemaleRule_40
			MotherWithFamilyToFemaleRule_41
			MotherWithFamilyToFemaleRule_56
			MotherWithFamilyToFemaleRule_57
			MotherWithFamilyToFemaleRule_97
			MotherWithFamilyToFemaleRule_105
			MotherWithFamilyToFemaleRule_121
	}
}

  rule RegisterToRegisterRule {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
		~_ex_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
	}
} 

  rule RegisterToRegisterRule_1 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-corr->pr
		{
			._type_ := "RegisterToRegisterCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
	}
} 

  rule RegisterToRegisterRule_3 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-corr->pr
		{
			._type_ := "RegisterToRegisterCorr"
		}
		~_cr_ : true
	}

	++pr:PersonRegister {
		.enamespace := <__trgModelName>
	}
	
	attributeConstraints {
	}
} 

  rule RegisterToRegisterRule_5 {
	++fr:FamilyRegister {
		.enamespace := <__srcModelName>
		++-corr->pr
		{
			._type_ := "RegisterToRegisterCorr"
		}
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
	}
} 


  rule IgnoreFamilyRule {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_ex_ : true
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		~_ex_ : true
	}

	
	attributeConstraints {
	}
} 

  rule IgnoreFamilyRule_1 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		~_cr_ : true
	}

	
	attributeConstraints {
	}
} 


  rule SonToMaleRule {
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
		{
			~_ex_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_ex_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_ex_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonToMaleRule_1 {
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonToMaleRule_2 {
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonToMaleRule_3 {
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonToMaleRule_7 {
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	++p:Male {
		.enamespace := <__trgModelName>
		.name := <personName>
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=<personName>
		)
	}
} 

  rule SonToMaleRule_8 {
	f:Family {
		.enamespace : <__srcModelName>
		++-sons->fm
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonToMaleRule_9 {
	f:Family {
		.enamespace : <__srcModelName>
		++-sons->fm
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonToMaleRule_25 {
	f:Family {
		.enamespace : <__srcModelName>
		++-sons->fm
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=<memberName>,
			combined=p::name
		)
	}
} 


  rule SonWithFamilyToMaleRule {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_ex_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
		{
			~_ex_ : true
		}
		~_ex_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_ex_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_ex_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_1 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_2 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_3 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_7 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	++p:Male {
		.enamespace := <__trgModelName>
		.name := <personName>
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=<personName>
		)
	}
} 

  rule SonWithFamilyToMaleRule_8 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_9 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-sons->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_32 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-sons->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_33 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-sons->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_40 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-sons->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_41 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-sons->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_56 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	++f:Family {
		.enamespace := <__srcModelName>
		++-sons->fm
		.name := <fname>
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=<fname>,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_57 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	++f:Family {
		.enamespace := <__srcModelName>
		++-sons->fm
		.name := <fname>
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=<fname>,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_97 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-sons->fm
		~_cr_ : true
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=<memberName>,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_105 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-sons->fm
		~_cr_ : true
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=<memberName>,
			combined=p::name
		)
	}
} 

  rule SonWithFamilyToMaleRule_121 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	++f:Family {
		.enamespace := <__srcModelName>
		++-sons->fm
		.name := <fname>
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=<fname>,
			right=<memberName>,
			combined=p::name
		)
	}
} 


  rule DaughterToFemaleRule {
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
		{
			~_ex_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_ex_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_ex_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterToFemaleRule_1 {
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterToFemaleRule_2 {
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterToFemaleRule_3 {
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterToFemaleRule_7 {
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	++p:Female {
		.enamespace := <__trgModelName>
		.name := <personName>
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=<personName>
		)
	}
} 

  rule DaughterToFemaleRule_8 {
	f:Family {
		.enamespace : <__srcModelName>
		++-daughters->fm
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterToFemaleRule_9 {
	f:Family {
		.enamespace : <__srcModelName>
		++-daughters->fm
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterToFemaleRule_25 {
	f:Family {
		.enamespace : <__srcModelName>
		++-daughters->fm
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=<memberName>,
			combined=p::name
		)
	}
} 


  rule DaughterWithFamilyToFemaleRule {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_ex_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
		{
			~_ex_ : true
		}
		~_ex_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_ex_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_ex_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_1 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_2 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_3 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_7 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	++p:Female {
		.enamespace := <__trgModelName>
		.name := <personName>
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=<personName>
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_8 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_9 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-daughters->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_32 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-daughters->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_33 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-daughters->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_40 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-daughters->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_41 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-daughters->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_56 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	++f:Family {
		.enamespace := <__srcModelName>
		++-daughters->fm
		.name := <fname>
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=<fname>,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_57 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	++f:Family {
		.enamespace := <__srcModelName>
		++-daughters->fm
		.name := <fname>
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=<fname>,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_97 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-daughters->fm
		~_cr_ : true
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=<memberName>,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_105 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-daughters->fm
		~_cr_ : true
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=<memberName>,
			combined=p::name
		)
	}
} 

  rule DaughterWithFamilyToFemaleRule_121 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	++f:Family {
		.enamespace := <__srcModelName>
		++-daughters->fm
		.name := <fname>
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=<fname>,
			right=<memberName>,
			combined=p::name
		)
	}
} 


  rule FatherToMaleRule {
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
		{
			~_ex_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_ex_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_ex_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherToMaleRule_1 {
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherToMaleRule_2 {
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherToMaleRule_3 {
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherToMaleRule_7 {
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	++p:Male {
		.enamespace := <__trgModelName>
		.name := <personName>
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=<personName>
		)
	}
} 

  rule FatherToMaleRule_8 {
	f:Family {
		.enamespace : <__srcModelName>
		++-father->fm
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherToMaleRule_9 {
	f:Family {
		.enamespace : <__srcModelName>
		++-father->fm
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherToMaleRule_25 {
	f:Family {
		.enamespace : <__srcModelName>
		++-father->fm
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=<memberName>,
			combined=p::name
		)
	}
} 


  rule FatherWithFamilyToMaleRule {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_ex_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
		{
			~_ex_ : true
		}
		~_ex_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_ex_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_ex_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_1 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_2 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_3 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_7 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	++p:Male {
		.enamespace := <__trgModelName>
		.name := <personName>
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=<personName>
		)
	}
} 

  rule FatherWithFamilyToMaleRule_8 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_9 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-father->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_32 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-father->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_33 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-father->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_40 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-father->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_41 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-father->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_56 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	++f:Family {
		.enamespace := <__srcModelName>
		++-father->fm
		.name := <fname>
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=<fname>,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_57 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	++f:Family {
		.enamespace := <__srcModelName>
		++-father->fm
		.name := <fname>
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=<fname>,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_97 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-father->fm
		~_cr_ : true
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=<memberName>,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_105 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-father->fm
		~_cr_ : true
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=<memberName>,
			combined=p::name
		)
	}
} 

  rule FatherWithFamilyToMaleRule_121 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	++f:Family {
		.enamespace := <__srcModelName>
		++-father->fm
		.name := <fname>
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToMaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Male {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=<fname>,
			right=<memberName>,
			combined=p::name
		)
	}
} 


  rule MotherToFemaleRule {
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
		{
			~_ex_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_ex_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_ex_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherToFemaleRule_1 {
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherToFemaleRule_2 {
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherToFemaleRule_3 {
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherToFemaleRule_7 {
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
		{
			~_cr_ : true
		}
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	++p:Female {
		.enamespace := <__trgModelName>
		.name := <personName>
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=<personName>
		)
	}
} 

  rule MotherToFemaleRule_8 {
	f:Family {
		.enamespace : <__srcModelName>
		++-mother->fm
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherToFemaleRule_9 {
	f:Family {
		.enamespace : <__srcModelName>
		++-mother->fm
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherToFemaleRule_25 {
	f:Family {
		.enamespace : <__srcModelName>
		++-mother->fm
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=<memberName>,
			combined=p::name
		)
	}
} 


  rule MotherWithFamilyToFemaleRule {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_ex_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
		{
			~_ex_ : true
		}
		~_ex_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_ex_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_ex_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_ex_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_1 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_2 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_3 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_7 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		++-persons->p
	}
	
	++p:Female {
		.enamespace := <__trgModelName>
		.name := <personName>
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=<personName>
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_8 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_9 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		-mother->fm
		{
			~_cr_ : true
		}
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_32 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-mother->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_33 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-mother->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_40 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-mother->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_41 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-mother->fm
		~_cr_ : true
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_56 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	++f:Family {
		.enamespace := <__srcModelName>
		++-mother->fm
		.name := <fname>
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		-corr->p
		{
			._type_ : "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=<fname>,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_57 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	++f:Family {
		.enamespace := <__srcModelName>
		++-mother->fm
		.name := <fname>
	}
	
	fm:FamilyMember {
		.enamespace : <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		~_cr_ : true
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=<fname>,
			right=fm::name,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_97 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		-families->f
		{
			~_cr_ : true
		}
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-mother->fm
		~_cr_ : true
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=<memberName>,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_105 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	f:Family {
		.enamespace : <__srcModelName>
		++-mother->fm
		~_cr_ : true
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=f::name,
			right=<memberName>,
			combined=p::name
		)
	}
} 

  rule MotherWithFamilyToFemaleRule_121 {
	fr:FamilyRegister {
		.enamespace : <__srcModelName>
		++-families->f
		-corr->pr
		{
			._type_ : "RegisterToRegisterCorr"
		}
	}
	
	++f:Family {
		.enamespace := <__srcModelName>
		++-mother->fm
		.name := <fname>
	}
	
	++fm:FamilyMember {
		.enamespace := <__srcModelName>
		++-corr->p
		{
			._type_ := "MemberToFemaleCorr"
		}
		.name := <memberName>
	}

	pr:PersonRegister {
		.enamespace : <__trgModelName>
		-persons->p
		{
			~_cr_ : true
		}
	}
	
	p:Female {
		.enamespace : <__trgModelName>
		~_cr_ : true
	}
	
	attributeConstraints {
		concat(
			separator=", ",
			left=<fname>,
			right=<memberName>,
			combined=p::name
		)
	}
} 

