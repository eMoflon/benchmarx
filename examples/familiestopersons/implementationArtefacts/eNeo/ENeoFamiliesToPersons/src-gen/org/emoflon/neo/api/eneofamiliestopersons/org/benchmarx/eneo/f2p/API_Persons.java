/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.eneofamiliestopersons.org.benchmarx.eneo.f2p;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.eneofamiliestopersons.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_Persons {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_Persons(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_Persons(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_Persons(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl#//@entities.0
	public Metamodel getMetamodel_Persons(){
		return (Metamodel) spec.getEntities().get(0);
	}
	
	public static final String Persons__PersonRegister = "Persons__PersonRegister";
	public static final String Persons__Person = "Persons__Person";
	public static final String Persons__Male = "Persons__Male";
	public static final String Persons__Female = "Persons__Female";
	
	//:~> platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl#//@entities.1
	
	//:~> platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl#//@entities.2
	public MalePatternAccess getPattern_MalePattern() {
		return new MalePatternAccess();
	}
	
	public class MalePatternAccess extends NeoPatternAccess<MalePatternData, MalePatternMask> {
		public final String _person = "person";
		public final String _register = "register";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(2);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<MalePatternData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MalePatternData(d));
		}
		
		@Override
		public MalePatternMask mask() {
			return new MalePatternMask();
		}
	}
	
	public class MalePatternData extends NeoData {
		public final PersonNode _person;
		public final RegisterNode _register;
		public final Register_persons_0_personRel _register_persons_0_person;
		
		public MalePatternData(Record data) {
			var _person = data.get("person");
			this._person = new PersonNode(_person);
			var _register = data.get("register");
			this._register = new RegisterNode(_register);
			var _register_persons_0_person = data.get("register_persons_0_person");
			this._register_persons_0_person = new Register_persons_0_personRel(_register_persons_0_person);
		}
		
		
		public class PersonNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PersonNode(Value _person) {
				if(!_person.get("id").isNull())
					this._id = _person.get("id").asInt();
				if(!_person.get("name").isNull())
					this._name = _person.get("name").asString();
				if(!_person.get("birthday").isNull())
					this._birthday = _person.get("birthday").asLocalDate();
				if(!_person.get("ename").isNull())
					this._ename = _person.get("ename").asString();
			}
		}
		
		public class RegisterNode {
			public String _ename;
			
			public RegisterNode(Value _register) {
				if(!_register.get("ename").isNull())
					this._ename = _register.get("ename").asString();
			}
		}
		
		public class Register_persons_0_personRel {
		
			public Register_persons_0_personRel(Value _register_persons_0_person) {
			}
		}
	}
	
	public class MalePatternMask extends NeoMask {
		public MalePatternMask setPerson(Long value) {
			nodeMask.put("person", value);
			return this;
		}
		public MalePatternMask setPersonId(int value) {
			attributeMask.put("person.id", value);
			return this;
		}
		public MalePatternMask setPersonName(String value) {
			attributeMask.put("person.name", value);
			return this;
		}
		public MalePatternMask setPersonBirthday(LocalDate value) {
			attributeMask.put("person.birthday", value);
			return this;
		}
		public MalePatternMask setPersonEname(String value) {
			attributeMask.put("person.ename", value);
			return this;
		}
		public MalePatternMask setRegister(Long value) {
			nodeMask.put("register", value);
			return this;
		}
		public MalePatternMask setRegisterEname(String value) {
			attributeMask.put("register.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl#//@entities.3
	public FemalePatternAccess getPattern_FemalePattern() {
		return new FemalePatternAccess();
	}
	
	public class FemalePatternAccess extends NeoPatternAccess<FemalePatternData, FemalePatternMask> {
		public final String _person = "person";
		public final String _register = "register";
		
		
		@Override
		public NeoPattern pattern(){
			var p = (Pattern) spec.getEntities().get(3);
			return NeoPatternFactory.createNeoPattern(p, builder);
		}
		
		@Override
		public Stream<FemalePatternData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new FemalePatternData(d));
		}
		
		@Override
		public FemalePatternMask mask() {
			return new FemalePatternMask();
		}
	}
	
	public class FemalePatternData extends NeoData {
		public final PersonNode _person;
		public final RegisterNode _register;
		public final Register_persons_0_personRel _register_persons_0_person;
		
		public FemalePatternData(Record data) {
			var _person = data.get("person");
			this._person = new PersonNode(_person);
			var _register = data.get("register");
			this._register = new RegisterNode(_register);
			var _register_persons_0_person = data.get("register_persons_0_person");
			this._register_persons_0_person = new Register_persons_0_personRel(_register_persons_0_person);
		}
		
		
		public class PersonNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PersonNode(Value _person) {
				if(!_person.get("id").isNull())
					this._id = _person.get("id").asInt();
				if(!_person.get("name").isNull())
					this._name = _person.get("name").asString();
				if(!_person.get("birthday").isNull())
					this._birthday = _person.get("birthday").asLocalDate();
				if(!_person.get("ename").isNull())
					this._ename = _person.get("ename").asString();
			}
		}
		
		public class RegisterNode {
			public String _ename;
			
			public RegisterNode(Value _register) {
				if(!_register.get("ename").isNull())
					this._ename = _register.get("ename").asString();
			}
		}
		
		public class Register_persons_0_personRel {
		
			public Register_persons_0_personRel(Value _register_persons_0_person) {
			}
		}
	}
	
	public class FemalePatternMask extends NeoMask {
		public FemalePatternMask setPerson(Long value) {
			nodeMask.put("person", value);
			return this;
		}
		public FemalePatternMask setPersonId(int value) {
			attributeMask.put("person.id", value);
			return this;
		}
		public FemalePatternMask setPersonName(String value) {
			attributeMask.put("person.name", value);
			return this;
		}
		public FemalePatternMask setPersonBirthday(LocalDate value) {
			attributeMask.put("person.birthday", value);
			return this;
		}
		public FemalePatternMask setPersonEname(String value) {
			attributeMask.put("person.ename", value);
			return this;
		}
		public FemalePatternMask setRegister(Long value) {
			nodeMask.put("register", value);
			return this;
		}
		public FemalePatternMask setRegisterEname(String value) {
			attributeMask.put("register.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl#//@entities.4
	
	//:~> platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl#//@entities.5
	public CreateFemaleAccess getRule_CreateFemale() {
		return new CreateFemaleAccess();
	}
	
	public class CreateFemaleAccess extends NeoRuleCoAccess<CreateFemaleData, CreateFemaleCoData, CreateFemaleMask> {
		public final String _p = "p";
		
		public final String _param__bday = "bday";
		public final String _param__name = "name";
		public final String _param__namespace = "namespace";
		public final String _param__id = "id";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(5);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreateFemaleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateFemaleData(d));
		}
			
		@Override
		public Stream<CreateFemaleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateFemaleCoData(d));
		}
		
		@Override
		public CreateFemaleMask mask() {
			return new CreateFemaleMask();
		}
	}
	
	public class CreateFemaleData extends NeoData {
		
		public CreateFemaleData(Record data) {
		}
		
		
	}
	
	public class CreateFemaleCoData extends NeoData {
		public final PNode _p;
		
		public CreateFemaleCoData(Record data) {
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class PNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("id").isNull())
					this._id = _p.get("id").asInt();
				if(!_p.get("name").isNull())
					this._name = _p.get("name").asString();
				if(!_p.get("birthday").isNull())
					this._birthday = _p.get("birthday").asLocalDate();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class CreateFemaleMask extends NeoMask {
		public CreateFemaleMask setP(Long value) {
			nodeMask.put("p", value);
			return this;
		}
		public CreateFemaleMask setPId(int value) {
			attributeMask.put("p.id", value);
			return this;
		}
		public CreateFemaleMask setPName(String value) {
			attributeMask.put("p.name", value);
			return this;
		}
		public CreateFemaleMask setPBirthday(LocalDate value) {
			attributeMask.put("p.birthday", value);
			return this;
		}
		public CreateFemaleMask setPEname(String value) {
			attributeMask.put("p.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl#//@entities.6
	public CreateMaleAccess getRule_CreateMale() {
		return new CreateMaleAccess();
	}
	
	public class CreateMaleAccess extends NeoRuleCoAccess<CreateMaleData, CreateMaleCoData, CreateMaleMask> {
		public final String _p = "p";
		
		public final String _param__bday = "bday";
		public final String _param__name = "name";
		public final String _param__namespace = "namespace";
		public final String _param__id = "id";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(6);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreateMaleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateMaleData(d));
		}
			
		@Override
		public Stream<CreateMaleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateMaleCoData(d));
		}
		
		@Override
		public CreateMaleMask mask() {
			return new CreateMaleMask();
		}
	}
	
	public class CreateMaleData extends NeoData {
		
		public CreateMaleData(Record data) {
		}
		
		
	}
	
	public class CreateMaleCoData extends NeoData {
		public final PNode _p;
		
		public CreateMaleCoData(Record data) {
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class PNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("id").isNull())
					this._id = _p.get("id").asInt();
				if(!_p.get("name").isNull())
					this._name = _p.get("name").asString();
				if(!_p.get("birthday").isNull())
					this._birthday = _p.get("birthday").asLocalDate();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class CreateMaleMask extends NeoMask {
		public CreateMaleMask setP(Long value) {
			nodeMask.put("p", value);
			return this;
		}
		public CreateMaleMask setPId(int value) {
			attributeMask.put("p.id", value);
			return this;
		}
		public CreateMaleMask setPName(String value) {
			attributeMask.put("p.name", value);
			return this;
		}
		public CreateMaleMask setPBirthday(LocalDate value) {
			attributeMask.put("p.birthday", value);
			return this;
		}
		public CreateMaleMask setPEname(String value) {
			attributeMask.put("p.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl#//@entities.7
	public DeletePersonAccess getRule_DeletePerson() {
		return new DeletePersonAccess();
	}
	
	public class DeletePersonAccess extends NeoRuleCoAccess<DeletePersonData, DeletePersonCoData, DeletePersonMask> {
		public final String _p = "p";
		
		public final String _param__id = "id";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(7);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<DeletePersonData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new DeletePersonData(d));
		}
			
		@Override
		public Stream<DeletePersonCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new DeletePersonCoData(d));
		}
		
		@Override
		public DeletePersonMask mask() {
			return new DeletePersonMask();
		}
	}
	
	public class DeletePersonData extends NeoData {
		public final PNode _p;
		
		public DeletePersonData(Record data) {
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class PNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("id").isNull())
					this._id = _p.get("id").asInt();
				if(!_p.get("name").isNull())
					this._name = _p.get("name").asString();
				if(!_p.get("birthday").isNull())
					this._birthday = _p.get("birthday").asLocalDate();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class DeletePersonCoData extends NeoData {
		public final PNode _p;
		
		public DeletePersonCoData(Record data) {
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class PNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("id").isNull())
					this._id = _p.get("id").asInt();
				if(!_p.get("name").isNull())
					this._name = _p.get("name").asString();
				if(!_p.get("birthday").isNull())
					this._birthday = _p.get("birthday").asLocalDate();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class DeletePersonMask extends NeoMask {
		public DeletePersonMask setP(Long value) {
			nodeMask.put("p", value);
			return this;
		}
		public DeletePersonMask setPId(int value) {
			attributeMask.put("p.id", value);
			return this;
		}
		public DeletePersonMask setPName(String value) {
			attributeMask.put("p.name", value);
			return this;
		}
		public DeletePersonMask setPBirthday(LocalDate value) {
			attributeMask.put("p.birthday", value);
			return this;
		}
		public DeletePersonMask setPEname(String value) {
			attributeMask.put("p.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl#//@entities.8
	public CreateRegisterPersonEdgeAccess getRule_CreateRegisterPersonEdge() {
		return new CreateRegisterPersonEdgeAccess();
	}
	
	public class CreateRegisterPersonEdgeAccess extends NeoRuleCoAccess<CreateRegisterPersonEdgeData, CreateRegisterPersonEdgeCoData, CreateRegisterPersonEdgeMask> {
		public final String _r = "r";
		public final String _p = "p";
		
		public final String _param__id = "id";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(8);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<CreateRegisterPersonEdgeData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateRegisterPersonEdgeData(d));
		}
			
		@Override
		public Stream<CreateRegisterPersonEdgeCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new CreateRegisterPersonEdgeCoData(d));
		}
		
		@Override
		public CreateRegisterPersonEdgeMask mask() {
			return new CreateRegisterPersonEdgeMask();
		}
	}
	
	public class CreateRegisterPersonEdgeData extends NeoData {
		public final RNode _r;
		public final PNode _p;
		
		public CreateRegisterPersonEdgeData(Record data) {
			var _r = data.get("r");
			this._r = new RNode(_r);
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class RNode {
			public String _ename;
			
			public RNode(Value _r) {
				if(!_r.get("ename").isNull())
					this._ename = _r.get("ename").asString();
			}
		}
		
		public class PNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("id").isNull())
					this._id = _p.get("id").asInt();
				if(!_p.get("name").isNull())
					this._name = _p.get("name").asString();
				if(!_p.get("birthday").isNull())
					this._birthday = _p.get("birthday").asLocalDate();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class CreateRegisterPersonEdgeCoData extends NeoData {
		public final RNode _r;
		public final R_persons_0_pRel _r_persons_0_p;
		public final PNode _p;
		
		public CreateRegisterPersonEdgeCoData(Record data) {
			var _r = data.get("r");
			this._r = new RNode(_r);
			var _r_persons_0_p = data.get("r_persons_0_p");
			this._r_persons_0_p = new R_persons_0_pRel(_r_persons_0_p);
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class RNode {
			public String _ename;
			
			public RNode(Value _r) {
				if(!_r.get("ename").isNull())
					this._ename = _r.get("ename").asString();
			}
		}
		
		public class R_persons_0_pRel {
		
			public R_persons_0_pRel(Value _r_persons_0_p) {
			}
		}
		public class PNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("id").isNull())
					this._id = _p.get("id").asInt();
				if(!_p.get("name").isNull())
					this._name = _p.get("name").asString();
				if(!_p.get("birthday").isNull())
					this._birthday = _p.get("birthday").asLocalDate();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class CreateRegisterPersonEdgeMask extends NeoMask {
		public CreateRegisterPersonEdgeMask setR(Long value) {
			nodeMask.put("r", value);
			return this;
		}
		public CreateRegisterPersonEdgeMask setREname(String value) {
			attributeMask.put("r.ename", value);
			return this;
		}
		public CreateRegisterPersonEdgeMask setP(Long value) {
			nodeMask.put("p", value);
			return this;
		}
		public CreateRegisterPersonEdgeMask setPId(int value) {
			attributeMask.put("p.id", value);
			return this;
		}
		public CreateRegisterPersonEdgeMask setPName(String value) {
			attributeMask.put("p.name", value);
			return this;
		}
		public CreateRegisterPersonEdgeMask setPBirthday(LocalDate value) {
			attributeMask.put("p.birthday", value);
			return this;
		}
		public CreateRegisterPersonEdgeMask setPEname(String value) {
			attributeMask.put("p.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl#//@entities.9
	public DeleteRegisterPersonEdgeAccess getRule_DeleteRegisterPersonEdge() {
		return new DeleteRegisterPersonEdgeAccess();
	}
	
	public class DeleteRegisterPersonEdgeAccess extends NeoRuleCoAccess<DeleteRegisterPersonEdgeData, DeleteRegisterPersonEdgeCoData, DeleteRegisterPersonEdgeMask> {
		public final String _r = "r";
		public final String _p = "p";
		
		public final String _param__id = "id";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(9);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<DeleteRegisterPersonEdgeData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new DeleteRegisterPersonEdgeData(d));
		}
			
		@Override
		public Stream<DeleteRegisterPersonEdgeCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new DeleteRegisterPersonEdgeCoData(d));
		}
		
		@Override
		public DeleteRegisterPersonEdgeMask mask() {
			return new DeleteRegisterPersonEdgeMask();
		}
	}
	
	public class DeleteRegisterPersonEdgeData extends NeoData {
		public final RNode _r;
		public final R_persons_0_pRel _r_persons_0_p;
		public final PNode _p;
		
		public DeleteRegisterPersonEdgeData(Record data) {
			var _r = data.get("r");
			this._r = new RNode(_r);
			var _r_persons_0_p = data.get("r_persons_0_p");
			this._r_persons_0_p = new R_persons_0_pRel(_r_persons_0_p);
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class RNode {
			public String _ename;
			
			public RNode(Value _r) {
				if(!_r.get("ename").isNull())
					this._ename = _r.get("ename").asString();
			}
		}
		
		public class R_persons_0_pRel {
		
			public R_persons_0_pRel(Value _r_persons_0_p) {
			}
		}
		public class PNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("id").isNull())
					this._id = _p.get("id").asInt();
				if(!_p.get("name").isNull())
					this._name = _p.get("name").asString();
				if(!_p.get("birthday").isNull())
					this._birthday = _p.get("birthday").asLocalDate();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class DeleteRegisterPersonEdgeCoData extends NeoData {
		public final RNode _r;
		public final R_persons_0_pRel _r_persons_0_p;
		public final PNode _p;
		
		public DeleteRegisterPersonEdgeCoData(Record data) {
			var _r = data.get("r");
			this._r = new RNode(_r);
			var _r_persons_0_p = data.get("r_persons_0_p");
			this._r_persons_0_p = new R_persons_0_pRel(_r_persons_0_p);
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class RNode {
			public String _ename;
			
			public RNode(Value _r) {
				if(!_r.get("ename").isNull())
					this._ename = _r.get("ename").asString();
			}
		}
		
		public class R_persons_0_pRel {
		
			public R_persons_0_pRel(Value _r_persons_0_p) {
			}
		}
		public class PNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("id").isNull())
					this._id = _p.get("id").asInt();
				if(!_p.get("name").isNull())
					this._name = _p.get("name").asString();
				if(!_p.get("birthday").isNull())
					this._birthday = _p.get("birthday").asLocalDate();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class DeleteRegisterPersonEdgeMask extends NeoMask {
		public DeleteRegisterPersonEdgeMask setR(Long value) {
			nodeMask.put("r", value);
			return this;
		}
		public DeleteRegisterPersonEdgeMask setREname(String value) {
			attributeMask.put("r.ename", value);
			return this;
		}
		public DeleteRegisterPersonEdgeMask setP(Long value) {
			nodeMask.put("p", value);
			return this;
		}
		public DeleteRegisterPersonEdgeMask setPId(int value) {
			attributeMask.put("p.id", value);
			return this;
		}
		public DeleteRegisterPersonEdgeMask setPName(String value) {
			attributeMask.put("p.name", value);
			return this;
		}
		public DeleteRegisterPersonEdgeMask setPBirthday(LocalDate value) {
			attributeMask.put("p.birthday", value);
			return this;
		}
		public DeleteRegisterPersonEdgeMask setPEname(String value) {
			attributeMask.put("p.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl#//@entities.10
	public ChangeBirthdayAccess getRule_ChangeBirthday() {
		return new ChangeBirthdayAccess();
	}
	
	public class ChangeBirthdayAccess extends NeoRuleCoAccess<ChangeBirthdayData, ChangeBirthdayCoData, ChangeBirthdayMask> {
		public final String _r = "r";
		public final String _p = "p";
		
		public final String _param__bday = "bday";
		public final String _param__id = "id";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(10);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<ChangeBirthdayData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ChangeBirthdayData(d));
		}
			
		@Override
		public Stream<ChangeBirthdayCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ChangeBirthdayCoData(d));
		}
		
		@Override
		public ChangeBirthdayMask mask() {
			return new ChangeBirthdayMask();
		}
	}
	
	public class ChangeBirthdayData extends NeoData {
		public final RNode _r;
		public final R_persons_0_pRel _r_persons_0_p;
		public final PNode _p;
		
		public ChangeBirthdayData(Record data) {
			var _r = data.get("r");
			this._r = new RNode(_r);
			var _r_persons_0_p = data.get("r_persons_0_p");
			this._r_persons_0_p = new R_persons_0_pRel(_r_persons_0_p);
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class RNode {
			public String _ename;
			
			public RNode(Value _r) {
				if(!_r.get("ename").isNull())
					this._ename = _r.get("ename").asString();
			}
		}
		
		public class R_persons_0_pRel {
		
			public R_persons_0_pRel(Value _r_persons_0_p) {
			}
		}
		public class PNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("id").isNull())
					this._id = _p.get("id").asInt();
				if(!_p.get("name").isNull())
					this._name = _p.get("name").asString();
				if(!_p.get("birthday").isNull())
					this._birthday = _p.get("birthday").asLocalDate();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class ChangeBirthdayCoData extends NeoData {
		public final RNode _r;
		public final R_persons_0_pRel _r_persons_0_p;
		public final PNode _p;
		
		public ChangeBirthdayCoData(Record data) {
			var _r = data.get("r");
			this._r = new RNode(_r);
			var _r_persons_0_p = data.get("r_persons_0_p");
			this._r_persons_0_p = new R_persons_0_pRel(_r_persons_0_p);
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class RNode {
			public String _ename;
			
			public RNode(Value _r) {
				if(!_r.get("ename").isNull())
					this._ename = _r.get("ename").asString();
			}
		}
		
		public class R_persons_0_pRel {
		
			public R_persons_0_pRel(Value _r_persons_0_p) {
			}
		}
		public class PNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("id").isNull())
					this._id = _p.get("id").asInt();
				if(!_p.get("name").isNull())
					this._name = _p.get("name").asString();
				if(!_p.get("birthday").isNull())
					this._birthday = _p.get("birthday").asLocalDate();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class ChangeBirthdayMask extends NeoMask {
		public ChangeBirthdayMask setR(Long value) {
			nodeMask.put("r", value);
			return this;
		}
		public ChangeBirthdayMask setREname(String value) {
			attributeMask.put("r.ename", value);
			return this;
		}
		public ChangeBirthdayMask setP(Long value) {
			nodeMask.put("p", value);
			return this;
		}
		public ChangeBirthdayMask setPId(int value) {
			attributeMask.put("p.id", value);
			return this;
		}
		public ChangeBirthdayMask setPName(String value) {
			attributeMask.put("p.name", value);
			return this;
		}
		public ChangeBirthdayMask setPBirthday(LocalDate value) {
			attributeMask.put("p.birthday", value);
			return this;
		}
		public ChangeBirthdayMask setPEname(String value) {
			attributeMask.put("p.ename", value);
			return this;
		}
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/src/org/benchmarx/eneo/f2p/Persons.msl#//@entities.11
	public ChangeNameAccess getRule_ChangeName() {
		return new ChangeNameAccess();
	}
	
	public class ChangeNameAccess extends NeoRuleCoAccess<ChangeNameData, ChangeNameCoData, ChangeNameMask> {
		public final String _r = "r";
		public final String _p = "p";
		
		public final String _param__name = "name";
		public final String _param__id = "id";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(11);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<ChangeNameData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ChangeNameData(d));
		}
			
		@Override
		public Stream<ChangeNameCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new ChangeNameCoData(d));
		}
		
		@Override
		public ChangeNameMask mask() {
			return new ChangeNameMask();
		}
	}
	
	public class ChangeNameData extends NeoData {
		public final RNode _r;
		public final R_persons_0_pRel _r_persons_0_p;
		public final PNode _p;
		
		public ChangeNameData(Record data) {
			var _r = data.get("r");
			this._r = new RNode(_r);
			var _r_persons_0_p = data.get("r_persons_0_p");
			this._r_persons_0_p = new R_persons_0_pRel(_r_persons_0_p);
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class RNode {
			public String _ename;
			
			public RNode(Value _r) {
				if(!_r.get("ename").isNull())
					this._ename = _r.get("ename").asString();
			}
		}
		
		public class R_persons_0_pRel {
		
			public R_persons_0_pRel(Value _r_persons_0_p) {
			}
		}
		public class PNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("id").isNull())
					this._id = _p.get("id").asInt();
				if(!_p.get("name").isNull())
					this._name = _p.get("name").asString();
				if(!_p.get("birthday").isNull())
					this._birthday = _p.get("birthday").asLocalDate();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class ChangeNameCoData extends NeoData {
		public final RNode _r;
		public final R_persons_0_pRel _r_persons_0_p;
		public final PNode _p;
		
		public ChangeNameCoData(Record data) {
			var _r = data.get("r");
			this._r = new RNode(_r);
			var _r_persons_0_p = data.get("r_persons_0_p");
			this._r_persons_0_p = new R_persons_0_pRel(_r_persons_0_p);
			var _p = data.get("p");
			this._p = new PNode(_p);
		}
		
		
		public class RNode {
			public String _ename;
			
			public RNode(Value _r) {
				if(!_r.get("ename").isNull())
					this._ename = _r.get("ename").asString();
			}
		}
		
		public class R_persons_0_pRel {
		
			public R_persons_0_pRel(Value _r_persons_0_p) {
			}
		}
		public class PNode {
			public int _id;
			public String _name;
			public LocalDate _birthday;
			public String _ename;
			
			public PNode(Value _p) {
				if(!_p.get("id").isNull())
					this._id = _p.get("id").asInt();
				if(!_p.get("name").isNull())
					this._name = _p.get("name").asString();
				if(!_p.get("birthday").isNull())
					this._birthday = _p.get("birthday").asLocalDate();
				if(!_p.get("ename").isNull())
					this._ename = _p.get("ename").asString();
			}
		}
		
	}
	
	public class ChangeNameMask extends NeoMask {
		public ChangeNameMask setR(Long value) {
			nodeMask.put("r", value);
			return this;
		}
		public ChangeNameMask setREname(String value) {
			attributeMask.put("r.ename", value);
			return this;
		}
		public ChangeNameMask setP(Long value) {
			nodeMask.put("p", value);
			return this;
		}
		public ChangeNameMask setPId(int value) {
			attributeMask.put("p.id", value);
			return this;
		}
		public ChangeNameMask setPName(String value) {
			attributeMask.put("p.name", value);
			return this;
		}
		public ChangeNameMask setPBirthday(LocalDate value) {
			attributeMask.put("p.birthday", value);
			return this;
		}
		public ChangeNameMask setPEname(String value) {
			attributeMask.put("p.ename", value);
			return this;
		}
	}
}
