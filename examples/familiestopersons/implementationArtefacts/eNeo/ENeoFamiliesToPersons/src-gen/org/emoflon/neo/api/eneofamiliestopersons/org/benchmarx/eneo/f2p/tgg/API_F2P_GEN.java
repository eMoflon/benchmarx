/** 
 * EMSL-API generated by eMoflon::Neo - Do not edit as this file will be overwritten
 */
package org.emoflon.neo.api.eneofamiliestopersons.org.benchmarx.eneo.f2p.tgg;

import org.emoflon.neo.cypher.common.*;
import org.emoflon.neo.cypher.constraints.*;
import org.emoflon.neo.cypher.factories.*;
import org.emoflon.neo.cypher.models.*;
import org.emoflon.neo.cypher.patterns.*;
import org.emoflon.neo.cypher.rules.*;
import org.emoflon.neo.engine.api.patterns.*;
import org.emoflon.neo.engine.api.constraints.*;
import org.emoflon.neo.engine.api.rules.*;
import org.emoflon.neo.emsl.eMSL.*;
import org.emoflon.neo.emsl.util.*;
import org.neo4j.driver.Value;
import org.neo4j.driver.Record;
import org.eclipse.emf.common.util.URI;
import org.emoflon.neo.api.eneofamiliestopersons.API_Common;
import java.util.Collection;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;
import java.util.Optional;
import java.time.LocalDate;

@SuppressWarnings("unused")
public class API_F2P_GEN {
	private EMSL_Spec spec;
	private NeoCoreBuilder builder;

	/** Use this constructor for default values */
	public API_F2P_GEN(NeoCoreBuilder builder) {
		this(builder, API_Common.PLATFORM_RESOURCE_URI, API_Common.PLATFORM_PLUGIN_URI, API_Common.NEOCORE_URI_INSTALLED);
	}

	/** Use this constructor to configure values for loading EMSL files */
	public API_F2P_GEN(NeoCoreBuilder builder, String platformResourceURIRoot, String platformPluginURIRoot, String neocoreURI){
		this((EMSL_Spec) EMSLUtil.loadSpecification("platform:/resource/EneoFamiliesToPersons/tgg-gen/org/benchmarx/eneo/f2p/tgg/F2P_GEN.msl", platformResourceURIRoot, platformPluginURIRoot, neocoreURI), builder);
	}

	public API_F2P_GEN(EMSL_Spec spec, NeoCoreBuilder builder) {
		this.spec = spec;
		this.builder = builder;
	}

	//:~> platform:/resource/EneoFamiliesToPersons/tgg-gen/org/benchmarx/eneo/f2p/tgg/F2P_GEN.msl#//@entities.0
	public Collection<NeoRule> getAllRulesForF2P_GEN() {
		Collection<NeoRule> rules = new HashSet<>();
		
		rules.add(getRule_RegisterToRegisterRule().rule());
		rules.add(getRule_IgnoreFamilyRule().rule());
		rules.add(getRule_SonToMaleRule().rule());
		rules.add(getRule_SonWithFamilyToMaleRule().rule());
		rules.add(getRule_DaughterToFemaleRule().rule());
		rules.add(getRule_DaughterWithFamilyToFemaleRule().rule());
		rules.add(getRule_FatherToMaleRule().rule());
		rules.add(getRule_FatherWithFamilyToMaleRule().rule());
		rules.add(getRule_MotherToFemaleRule().rule());
		rules.add(getRule_MotherWithFamilyToFemaleRule().rule());
		return rules;
	}
	
	public Collection<NeoConstraint> getAllConstraintsForF2P_GEN() {
		Collection<NeoConstraint> constraints = new HashSet<>();
		return constraints;
	}
	
	public Collection<Rule> getAllEMSLRulesForF2P_GEN(){
		var rules = new HashSet<Rule>();
		rules.add((Rule) spec.getEntities().get(1));
		rules.add((Rule) spec.getEntities().get(2));
		rules.add((Rule) spec.getEntities().get(3));
		rules.add((Rule) spec.getEntities().get(4));
		rules.add((Rule) spec.getEntities().get(5));
		rules.add((Rule) spec.getEntities().get(6));
		rules.add((Rule) spec.getEntities().get(7));
		rules.add((Rule) spec.getEntities().get(8));
		rules.add((Rule) spec.getEntities().get(9));
		rules.add((Rule) spec.getEntities().get(10));
		return rules;
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/tgg-gen/org/benchmarx/eneo/f2p/tgg/F2P_GEN.msl#//@entities.1
	public RegisterToRegisterRuleAccess getRule_RegisterToRegisterRule() {
		return new RegisterToRegisterRuleAccess();
	}
	
	public class RegisterToRegisterRuleAccess extends NeoRuleCoAccess<RegisterToRegisterRuleData, RegisterToRegisterRuleCoData, RegisterToRegisterRuleMask> {
		public final String _fr = "fr";
		public final String _pr = "pr";
		
		public final String _param____srcModelName = "__srcModelName";
		public final String _param____trgModelName = "__trgModelName";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(1);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<RegisterToRegisterRuleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new RegisterToRegisterRuleData(d));
		}
			
		@Override
		public Stream<RegisterToRegisterRuleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new RegisterToRegisterRuleCoData(d));
		}
		
		@Override
		public RegisterToRegisterRuleMask mask() {
			return new RegisterToRegisterRuleMask();
		}
	}
	
	public class RegisterToRegisterRuleData extends NeoData {
		public RegisterToRegisterRuleData(Record data) {
		
		}
	}
	
	public class RegisterToRegisterRuleCoData extends NeoData {
		public RegisterToRegisterRuleCoData(Record data) {
		
		}
	}
	
	public class RegisterToRegisterRuleMask extends NeoMask {
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/tgg-gen/org/benchmarx/eneo/f2p/tgg/F2P_GEN.msl#//@entities.2
	public IgnoreFamilyRuleAccess getRule_IgnoreFamilyRule() {
		return new IgnoreFamilyRuleAccess();
	}
	
	public class IgnoreFamilyRuleAccess extends NeoRuleCoAccess<IgnoreFamilyRuleData, IgnoreFamilyRuleCoData, IgnoreFamilyRuleMask> {
		public final String _fr = "fr";
		public final String _f = "f";
		
		public final String _param____srcModelName = "__srcModelName";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(2);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<IgnoreFamilyRuleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new IgnoreFamilyRuleData(d));
		}
			
		@Override
		public Stream<IgnoreFamilyRuleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new IgnoreFamilyRuleCoData(d));
		}
		
		@Override
		public IgnoreFamilyRuleMask mask() {
			return new IgnoreFamilyRuleMask();
		}
	}
	
	public class IgnoreFamilyRuleData extends NeoData {
		public IgnoreFamilyRuleData(Record data) {
		
		}
	}
	
	public class IgnoreFamilyRuleCoData extends NeoData {
		public IgnoreFamilyRuleCoData(Record data) {
		
		}
	}
	
	public class IgnoreFamilyRuleMask extends NeoMask {
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/tgg-gen/org/benchmarx/eneo/f2p/tgg/F2P_GEN.msl#//@entities.3
	public SonToMaleRuleAccess getRule_SonToMaleRule() {
		return new SonToMaleRuleAccess();
	}
	
	public class SonToMaleRuleAccess extends NeoRuleCoAccess<SonToMaleRuleData, SonToMaleRuleCoData, SonToMaleRuleMask> {
		public final String _f = "f";
		public final String _fm = "fm";
		public final String _pr = "pr";
		public final String _p = "p";
		
		public final String _param____srcModelName = "__srcModelName";
		public final String _param__memberName = "memberName";
		public final String _param____trgModelName = "__trgModelName";
		public final String _param__personName = "personName";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(3);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<SonToMaleRuleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new SonToMaleRuleData(d));
		}
			
		@Override
		public Stream<SonToMaleRuleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new SonToMaleRuleCoData(d));
		}
		
		@Override
		public SonToMaleRuleMask mask() {
			return new SonToMaleRuleMask();
		}
	}
	
	public class SonToMaleRuleData extends NeoData {
		public SonToMaleRuleData(Record data) {
		
		}
	}
	
	public class SonToMaleRuleCoData extends NeoData {
		public SonToMaleRuleCoData(Record data) {
		
		}
	}
	
	public class SonToMaleRuleMask extends NeoMask {
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/tgg-gen/org/benchmarx/eneo/f2p/tgg/F2P_GEN.msl#//@entities.4
	public SonWithFamilyToMaleRuleAccess getRule_SonWithFamilyToMaleRule() {
		return new SonWithFamilyToMaleRuleAccess();
	}
	
	public class SonWithFamilyToMaleRuleAccess extends NeoRuleCoAccess<SonWithFamilyToMaleRuleData, SonWithFamilyToMaleRuleCoData, SonWithFamilyToMaleRuleMask> {
		public final String _fr = "fr";
		public final String _f = "f";
		public final String _fm = "fm";
		public final String _pr = "pr";
		public final String _p = "p";
		
		public final String _param____srcModelName = "__srcModelName";
		public final String _param__fname = "fname";
		public final String _param__memberName = "memberName";
		public final String _param____trgModelName = "__trgModelName";
		public final String _param__personName = "personName";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(4);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<SonWithFamilyToMaleRuleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new SonWithFamilyToMaleRuleData(d));
		}
			
		@Override
		public Stream<SonWithFamilyToMaleRuleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new SonWithFamilyToMaleRuleCoData(d));
		}
		
		@Override
		public SonWithFamilyToMaleRuleMask mask() {
			return new SonWithFamilyToMaleRuleMask();
		}
	}
	
	public class SonWithFamilyToMaleRuleData extends NeoData {
		public SonWithFamilyToMaleRuleData(Record data) {
		
		}
	}
	
	public class SonWithFamilyToMaleRuleCoData extends NeoData {
		public SonWithFamilyToMaleRuleCoData(Record data) {
		
		}
	}
	
	public class SonWithFamilyToMaleRuleMask extends NeoMask {
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/tgg-gen/org/benchmarx/eneo/f2p/tgg/F2P_GEN.msl#//@entities.5
	public DaughterToFemaleRuleAccess getRule_DaughterToFemaleRule() {
		return new DaughterToFemaleRuleAccess();
	}
	
	public class DaughterToFemaleRuleAccess extends NeoRuleCoAccess<DaughterToFemaleRuleData, DaughterToFemaleRuleCoData, DaughterToFemaleRuleMask> {
		public final String _f = "f";
		public final String _fm = "fm";
		public final String _pr = "pr";
		public final String _p = "p";
		
		public final String _param____srcModelName = "__srcModelName";
		public final String _param__memberName = "memberName";
		public final String _param____trgModelName = "__trgModelName";
		public final String _param__personName = "personName";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(5);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<DaughterToFemaleRuleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new DaughterToFemaleRuleData(d));
		}
			
		@Override
		public Stream<DaughterToFemaleRuleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new DaughterToFemaleRuleCoData(d));
		}
		
		@Override
		public DaughterToFemaleRuleMask mask() {
			return new DaughterToFemaleRuleMask();
		}
	}
	
	public class DaughterToFemaleRuleData extends NeoData {
		public DaughterToFemaleRuleData(Record data) {
		
		}
	}
	
	public class DaughterToFemaleRuleCoData extends NeoData {
		public DaughterToFemaleRuleCoData(Record data) {
		
		}
	}
	
	public class DaughterToFemaleRuleMask extends NeoMask {
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/tgg-gen/org/benchmarx/eneo/f2p/tgg/F2P_GEN.msl#//@entities.6
	public DaughterWithFamilyToFemaleRuleAccess getRule_DaughterWithFamilyToFemaleRule() {
		return new DaughterWithFamilyToFemaleRuleAccess();
	}
	
	public class DaughterWithFamilyToFemaleRuleAccess extends NeoRuleCoAccess<DaughterWithFamilyToFemaleRuleData, DaughterWithFamilyToFemaleRuleCoData, DaughterWithFamilyToFemaleRuleMask> {
		public final String _fr = "fr";
		public final String _f = "f";
		public final String _fm = "fm";
		public final String _pr = "pr";
		public final String _p = "p";
		
		public final String _param____srcModelName = "__srcModelName";
		public final String _param__fname = "fname";
		public final String _param__memberName = "memberName";
		public final String _param____trgModelName = "__trgModelName";
		public final String _param__personName = "personName";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(6);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<DaughterWithFamilyToFemaleRuleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new DaughterWithFamilyToFemaleRuleData(d));
		}
			
		@Override
		public Stream<DaughterWithFamilyToFemaleRuleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new DaughterWithFamilyToFemaleRuleCoData(d));
		}
		
		@Override
		public DaughterWithFamilyToFemaleRuleMask mask() {
			return new DaughterWithFamilyToFemaleRuleMask();
		}
	}
	
	public class DaughterWithFamilyToFemaleRuleData extends NeoData {
		public DaughterWithFamilyToFemaleRuleData(Record data) {
		
		}
	}
	
	public class DaughterWithFamilyToFemaleRuleCoData extends NeoData {
		public DaughterWithFamilyToFemaleRuleCoData(Record data) {
		
		}
	}
	
	public class DaughterWithFamilyToFemaleRuleMask extends NeoMask {
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/tgg-gen/org/benchmarx/eneo/f2p/tgg/F2P_GEN.msl#//@entities.7
	public FatherToMaleRuleAccess getRule_FatherToMaleRule() {
		return new FatherToMaleRuleAccess();
	}
	
	public class FatherToMaleRuleAccess extends NeoRuleCoAccess<FatherToMaleRuleData, FatherToMaleRuleCoData, FatherToMaleRuleMask> {
		public final String _f = "f";
		public final String _fm = "fm";
		public final String _pr = "pr";
		public final String _p = "p";
		
		public final String _param____srcModelName = "__srcModelName";
		public final String _param__memberName = "memberName";
		public final String _param____trgModelName = "__trgModelName";
		public final String _param__personName = "personName";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(7);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<FatherToMaleRuleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new FatherToMaleRuleData(d));
		}
			
		@Override
		public Stream<FatherToMaleRuleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new FatherToMaleRuleCoData(d));
		}
		
		@Override
		public FatherToMaleRuleMask mask() {
			return new FatherToMaleRuleMask();
		}
	}
	
	public class FatherToMaleRuleData extends NeoData {
		public FatherToMaleRuleData(Record data) {
		
		}
	}
	
	public class FatherToMaleRuleCoData extends NeoData {
		public FatherToMaleRuleCoData(Record data) {
		
		}
	}
	
	public class FatherToMaleRuleMask extends NeoMask {
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/tgg-gen/org/benchmarx/eneo/f2p/tgg/F2P_GEN.msl#//@entities.8
	public FatherWithFamilyToMaleRuleAccess getRule_FatherWithFamilyToMaleRule() {
		return new FatherWithFamilyToMaleRuleAccess();
	}
	
	public class FatherWithFamilyToMaleRuleAccess extends NeoRuleCoAccess<FatherWithFamilyToMaleRuleData, FatherWithFamilyToMaleRuleCoData, FatherWithFamilyToMaleRuleMask> {
		public final String _fr = "fr";
		public final String _f = "f";
		public final String _fm = "fm";
		public final String _pr = "pr";
		public final String _p = "p";
		
		public final String _param____srcModelName = "__srcModelName";
		public final String _param__fname = "fname";
		public final String _param__memberName = "memberName";
		public final String _param____trgModelName = "__trgModelName";
		public final String _param__personName = "personName";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(8);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<FatherWithFamilyToMaleRuleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new FatherWithFamilyToMaleRuleData(d));
		}
			
		@Override
		public Stream<FatherWithFamilyToMaleRuleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new FatherWithFamilyToMaleRuleCoData(d));
		}
		
		@Override
		public FatherWithFamilyToMaleRuleMask mask() {
			return new FatherWithFamilyToMaleRuleMask();
		}
	}
	
	public class FatherWithFamilyToMaleRuleData extends NeoData {
		public FatherWithFamilyToMaleRuleData(Record data) {
		
		}
	}
	
	public class FatherWithFamilyToMaleRuleCoData extends NeoData {
		public FatherWithFamilyToMaleRuleCoData(Record data) {
		
		}
	}
	
	public class FatherWithFamilyToMaleRuleMask extends NeoMask {
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/tgg-gen/org/benchmarx/eneo/f2p/tgg/F2P_GEN.msl#//@entities.9
	public MotherToFemaleRuleAccess getRule_MotherToFemaleRule() {
		return new MotherToFemaleRuleAccess();
	}
	
	public class MotherToFemaleRuleAccess extends NeoRuleCoAccess<MotherToFemaleRuleData, MotherToFemaleRuleCoData, MotherToFemaleRuleMask> {
		public final String _f = "f";
		public final String _fm = "fm";
		public final String _pr = "pr";
		public final String _p = "p";
		
		public final String _param____srcModelName = "__srcModelName";
		public final String _param__memberName = "memberName";
		public final String _param____trgModelName = "__trgModelName";
		public final String _param__personName = "personName";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(9);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MotherToFemaleRuleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MotherToFemaleRuleData(d));
		}
			
		@Override
		public Stream<MotherToFemaleRuleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MotherToFemaleRuleCoData(d));
		}
		
		@Override
		public MotherToFemaleRuleMask mask() {
			return new MotherToFemaleRuleMask();
		}
	}
	
	public class MotherToFemaleRuleData extends NeoData {
		public MotherToFemaleRuleData(Record data) {
		
		}
	}
	
	public class MotherToFemaleRuleCoData extends NeoData {
		public MotherToFemaleRuleCoData(Record data) {
		
		}
	}
	
	public class MotherToFemaleRuleMask extends NeoMask {
	}
	
	//:~> platform:/resource/EneoFamiliesToPersons/tgg-gen/org/benchmarx/eneo/f2p/tgg/F2P_GEN.msl#//@entities.10
	public MotherWithFamilyToFemaleRuleAccess getRule_MotherWithFamilyToFemaleRule() {
		return new MotherWithFamilyToFemaleRuleAccess();
	}
	
	public class MotherWithFamilyToFemaleRuleAccess extends NeoRuleCoAccess<MotherWithFamilyToFemaleRuleData, MotherWithFamilyToFemaleRuleCoData, MotherWithFamilyToFemaleRuleMask> {
		public final String _fr = "fr";
		public final String _f = "f";
		public final String _fm = "fm";
		public final String _pr = "pr";
		public final String _p = "p";
		
		public final String _param____srcModelName = "__srcModelName";
		public final String _param__fname = "fname";
		public final String _param__memberName = "memberName";
		public final String _param____trgModelName = "__trgModelName";
		public final String _param__personName = "personName";
		
		@Override
		public NeoRule rule(){
			var r = (Rule) spec.getEntities().get(10);
			return NeoRuleFactory.createNeoRule(r, builder);
		}
		
		@Override
		public Stream<MotherWithFamilyToFemaleRuleData> data(Collection<NeoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MotherWithFamilyToFemaleRuleData(d));
		}
			
		@Override
		public Stream<MotherWithFamilyToFemaleRuleCoData> codata(Collection<NeoCoMatch> matches) {
			var data = NeoMatch.getData(matches);
			return data.stream().map(d -> new MotherWithFamilyToFemaleRuleCoData(d));
		}
		
		@Override
		public MotherWithFamilyToFemaleRuleMask mask() {
			return new MotherWithFamilyToFemaleRuleMask();
		}
	}
	
	public class MotherWithFamilyToFemaleRuleData extends NeoData {
		public MotherWithFamilyToFemaleRuleData(Record data) {
		
		}
	}
	
	public class MotherWithFamilyToFemaleRuleCoData extends NeoData {
		public MotherWithFamilyToFemaleRuleCoData(Record data) {
		
		}
	}
	
	public class MotherWithFamilyToFemaleRuleMask extends NeoMask {
	}
}
